// Modern publishing setup using maven-publish and signing
apply plugin: 'maven-publish'
apply plugin: 'signing'

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

publishing {
    repositories {
        def preferredRepo = project.findProperty('preferredRepo')
        println "preferredRepo=$preferredRepo"

        if (preferredRepo == 'local') {
            mavenLocal()
        } else if (preferredRepo != null &&
                project.hasProperty('preferredUsername') &&
                project.hasProperty('preferredPassword')) {

            def repositoryUrl = preferredRepo
                    .replace('__groupId__', project.group)
                    .replace('__artifactId__', project.name)

            maven {
                name = "PreferredRepo"
                url = uri(repositoryUrl)
                credentials {
                    username = project.findProperty('preferredUsername')
                    password = project.findProperty('preferredPassword')
                }
            }
        } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
            def isSnapshot = version.endsWith('-SNAPSHOT')
            def sonatypeRepositoryUrl = isSnapshot ?
                    "https://oss.sonatype.org/content/repositories/snapshots/" :
                    "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

            maven {
                name = "Sonatype"
                url = uri(sonatypeRepositoryUrl)
                credentials {
                    username = project.findProperty('sonatypeUsername')
                    password = project.findProperty('sonatypePassword')
                }
            }
        } else {
            println "Deployment settings missing/incomplete for ${project.name}."
        }
    }
}

signing {
    if (project.hasProperty('signing.keyId') &&
            project.hasProperty('signing.password') &&
            project.hasProperty('signing.secretKeyRingFile')) {

        sign publishing.publications.mavenJava
    } else {
        println "Signing information missing/incomplete for ${project.name}"
    }
}
